from typing import Optional, Union, Callable
import numpy as np
import IPython.display as ipd



class BaseNotes:
    def __init__(
        self,
        waveform: Union[str, Callable] = 'sin',
        duration: Union[float, int] = 1.,
        unit: str = "s",
        bpm: Union[float, int] = 120,
        sr: int = 22050,
        A4: float = 440.
    ):
        self.waveform = waveform
        self.duration = duration
        self.unit = unit
        self.bpm = bpm
        self.sr = sr
        self.A4 = A4

    def render(self):
        pass

    def sin(
        self,
        duration: Optional[float] = None,
        unit: Optional[str] = None,
        bpm: Optional[float] = None,
    ) -> np.ndarray:
        """
        Generate sin wave of the note. It is the same as 
        ``Note.render('sin')``.

        Args:
            duration (float, optional): duration
            unit (str, optional): unit of duration
            bpm (float, optional): BPM (beats per minute)

        Returns:
            np.ndarray: sin wave of the note
        """
        return self.render('sin', duration=duration, unit=unit, bpm=bpm)

    def square(
        self,
        duration: Optional[float] = None,
        unit: Optional[str] = None,
        bpm: Optional[float] = None,
        duty: float = 0.5
    ) -> np.ndarray:
        """
        Generate square wave of the note. It is the same as
        ``Note.render('square')``.

        Args:
            duration (float, optional): duration
            unit (str, optional): unit of duration
            bpm (float, optional): BPM (beats per minute)
            duty (float, optional): duty cycle

        Returns:
            np.ndarray: square wave of the note
        """
        return self.render(
            'square',
            duration=duration,
            unit=unit,
            bpm=bpm,
            duty=duty
        )

    def sawtooth(
        self,
        duration: Optional[float] = None,
        unit: Optional[str] = None,
        bpm: Optional[float] = None,
        width: float = 1.,
    ) -> np.ndarray:
        """
        Generate sawtooth wave of the note. It is the same as
        ``Note.render('sawtooth')``.

        Args:
            duration (float, optional): duration
            unit (str, optional): unit of duration
            bpm (float, optional): BPM (beats per minute)
            width (float, optional): width of sawtooth

        Returns:
            np.ndarray: sawtooth wave of the note
        """
        return self.render(
            'sawtooth',
            duration=duration,
            unit=unit,
            bpm=bpm,
            width=width
        )

    def triangle(
        self,
        duration: Optional[float] = None,
        unit: Optional[str] = None,
        bpm: Optional[float] = None,
    ) -> np.ndarray:
        """
        Generate triangle wave of the note. It is the same as
        ``Note.render('triangle')``, ``note.sawtooth(width=0.5)``.

        Args:
            duration (float, optional): duration
            unit (str, optional): unit of duration
            bpm (float, optional): BPM (beats per minute)

        Returns:
            np.ndarray: triangle wave of the note
        """
        return self.render('triangle', duration=duration, unit=unit, bpm=bpm)

    def play(
        self,
        waveform: Optional[Union[str, Callable]] = None,
        duration: Optional[float] = None,
        unit: Optional[str] = None,
        bpm: Optional[float] = None,
        **kwargs
    ) -> ipd.Audio:
        """
        Play note sound in IPython notebook. Return
        IPython.display.Audio object. This wave is generated by
        ``Note.render()``.

        Args:
            waveform (Union[str, Callables], optional): waveform type.
            duration (float, optional): duration.
            unit (str, optional): unit of duration.
            bpm (float, optional):BPM (beats per minute).

        Returns:
            ipd.Audio: IPython.display.Audio object.
        """
        y = self.render(
            waveform,
            duration=duration,
            unit=unit,
            bpm=bpm,
            **kwargs
        )
        return ipd.Audio(y, rate=self.sr)
